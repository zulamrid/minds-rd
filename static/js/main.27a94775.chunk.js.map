{"version":3,"sources":["logo.svg","store/app/index.js","store/store.js","store/app/action.js","components/Draw/index.js","components/Screen/SideBarLeft/index.js","components/Screen/SideBarRight/index.js","components/Screen/index.js","components/Screen/Preview/index.js","components/Route.js","App.js","reportWebVitals.js","index.js"],"names":["initialState","buttons","shapes","image","selected","image_shape","selected_shape","item","reducer","state","action","type","payload","map","v","index","id","value","key","filter","i","combineReducers","Main","app","store","createStore","applyMiddleware","thunk","updateButton","dispatch","console","log","updateShape","selectedShape","width","window","innerWidth","height","innerHeight","Rectangle","shapeProps","isSelected","onSelect","onChange","shapeRef","React","useRef","trRef","useEffect","current","nodes","getLayer","batchDraw","Fragment","onClick","onTap","ref","radius","draggable","onDragEnd","e","x","target","y","onTransformEnd","node","scaleX","scaleY","Math","max","boundBoxFunc","oldBox","newBox","Shape","Index","props","useDispatch","useSelector","useState","selectedId","selectShape","selectedIdShape","selectShapeS","checkDeselect","getStage","hideSidebar","showSidebar","document","querySelector","style","right","onMouseDown","onTouchStart","backgroundImage","backgroundRepeat","backgroundSize","backgroundColor","rect","alert","label","newAttrs","rects","slice","className","color","JSON","stringify","changeDetail","updateDetail","chnageBorderRadius","indexborder","datas","cornerRadius","length","name","parseInt","min","parseFloat","defaultValue","opacity","marginBottom","event","hex","fill","marginTop","step","stokeWidth","stroke","shadowOpacity","shadowBlur","App","history","useHistory","urlImage","setUrlImage","selectedButton","_addImage","display","justifyContent","margin","push","dispacth","deleteItem","padding","borderRadius","borderWidth","placeholder","uuidv4","strokeWidth","shadowColor","shadowOffset","alignContent","Routes","exact","path","component","Preview","Store","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.27a94775.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\n\nconst initialState = {\n    buttons: [],\n    shapes: [],\n    image: '',\n    selected: '',\n    image_shape: '',\n    selected_shape: '',\n    item: ''\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case \"ADD_BUTTON\":\n            return {\n                ...state,\n                buttons: [...state.buttons, action.payload]\n            }\n        case \"UPDATE_BUTTON\":\n            return {\n                ...state,\n                buttons: state.buttons.map((v, index) =>\n                    v.id === action.payload.index.id ? { ...v, ...action.payload.value } : v\n                )\n            }\n        case \"UPDATE_DETAIL\":\n            return {\n                ...state,\n                buttons: state.buttons.map((v, index) =>\n                    v.id === action.payload.id ? { ...v, [action.payload.key]: action.payload.value } : v\n                )\n            }\n        case \"UPDATE_BORDER_RADIUS\":\n            return {\n                ...state,\n                buttons: state.buttons.map((v, index) => \n                    v.id === action.payload.id ? { ...v, [action.payload.key] : action.payload.value } : v\n                )\n            }\n        case \"DELETE_BUTTON\":\n            return {\n                ...state,\n                buttons: state.buttons.filter((v, i) => i !== action.payload),\n                selected: ''\n            }\n        case \"SET_IMAGE\": {\n            return {\n                ...state,\n                image: action.payload\n            }\n        }\n        case \"SELECTED\": {\n            return {\n                ...state,\n                selected: action.payload,\n                item: 'button'\n            }\n        }\n        case \"REMOVE_BUTTON\":\n            return {\n                ...state,\n            }\n        case \"EDIT_BUTTON\":\n            return {\n                ...state\n            }\n        case \"ADD_SHAPE\":\n            return {\n                ...state,\n                shapes: [...state.shapes, action.payload]\n            }\n        case \"UPDATE_SHAPE\":\n            return {\n                ...state,\n                shapes: state.shapes.map((v, index) =>\n                    v.id === action.payload.index.id ? { ...v, ...action.payload.value } : v\n                )\n            }\n        case \"UPDATE_DETAIL_SHAPE\":\n            return {\n                ...state,\n                shapes: state.shapes.map((v, index) =>\n                    v.id === action.payload.id ? { ...v, [action.payload.key]: action.payload.value } : v\n                )\n            }\n        case \"DELETE_SHAPE\":\n            return {\n                ...state,\n                shapes: state.shapes.filter((v, i) => i !== action.payload),\n                selected_shape: ''\n            }\n        case \"SELECTED_SHAPE\": {\n            return {\n                ...state,\n                selected_shape: action.payload,\n                item: 'shape'\n            }\n        }\n        default:\n            return state\n    }\n}\n\nexport default reducer;","import {compose, createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from \"redux-thunk\";\n\nimport app from './app';\n\nconst reducer = combineReducers({\n    Main: app,\n})\n\nconst store = createStore(reducer, {},  applyMiddleware(thunk));\n\nexport default store;","import { v4 as uuidv4 } from 'uuid';\n\nexport const addButton = () => {\n    return (dispatch) => {\n        const payload = {\n            id: uuidv4(),\n            x: 10,\n            y: 10,\n            width: 180,\n            height: 80,\n            name: 'label1',\n            fill: '#0984e3',\n            opacity: 1,\n            stroke: 'black',\n            strokeWidth: 0,\n            cornerRadius: [0, 0, 0, 0],\n            shadowColor: 'black',\n            shadowBlur: 0,\n            shadowOffset: { x: 10, y: 10 },\n            shadowOpacity: 0.5,\n        }\n        dispatch({\n            type: 'ADD_BUTTON',\n            payload\n        })\n    }\n}\n\nexport const updateButton = (index, v) => {\n    return (dispatch) => {\n        const payload = {\n            index,\n            value: v\n        }\n\n        console.log(payload)\n\n        dispatch({\n            type: 'UPDATE_BUTTON',\n            payload\n        })\n    }\n}\n\nexport const selected = (payload) => {\n    return (dispatch) => {\n        dispatch({\n            type: 'SELECTED',\n            payload\n        })\n    }\n}\n\nexport const setImage = (payload) => {\n    return (dispatch) => {\n        console.log(payload)\n        dispatch({\n            type: 'SET_IMAGE',\n            payload\n        })\n    }\n}\n\nexport const updateDetail = (payload) => {\n    return (dispatch) => {\n        console.log(payload)\n        dispatch({\n            type: 'UPDATE_DETAIL',\n            payload\n        })\n    }\n}\n\nexport const updateBorderRadius = (v) => {\n    return (dispatch) => {\n        console.log(v)\n        const payload = {\n            id: v.id,\n            key: v.key,\n            index: v.index,\n            value: [\n                v.indexborder === 0 ? v.value : v.datas[0],\n                v.indexborder === 1 ? v.value : v.datas[1],\n                v.indexborder === 2 ? v.value : v.datas[2],\n                v.indexborder === 3 ? v.value : v.datas[3],\n                ]\n        }\n        dispatch({\n            type: 'UPDATE_BORDER_RADIUS',\n            payload\n        })\n    }\n}\n\nexport const addShape = () => {\n    return (dispatch) => {\n        const payload = {\n            x: 10,\n            y: 10,\n            width: 200,\n            height: 200,\n            label: 'shape1',\n            fill: '#0984e3',\n            opacity: 0.5,\n            radius: 10,\n            radius: 70,\n            fill: 'red',\n            stroke: 'black',\n            strokeWidth: 4,\n            // shadowColor: 'black',\n            // shadowBlur: 10,\n            // shadowOffset: { x: 10, y: 10 },\n            // shadowOpacity: 0.5,\n            id: uuidv4(),\n        }\n        dispatch({\n            type: 'ADD_SHAPE',\n            payload\n        })\n    }\n}\n\nexport const updateShape = (index, v) => {\n    return (dispatch) => {\n        const payload = {\n            index,\n            value: v\n        }\n\n        console.log(payload)\n\n        dispatch({\n            type: 'UPDATE_SHAPE',\n            payload\n        })\n    }\n}\n\nexport const selectedShape = (payload) => {\n    return (dispatch) => {\n        dispatch({\n            type: 'SELECTED_SHAPE',\n            payload\n        })\n    }\n}\n\nexport const setImageShape = (payload) => {\n    return (dispatch) => {\n        console.log(payload)\n        dispatch({\n            type: 'SET_IMAGE_SHAPE',\n            payload\n        })\n    }\n}\n\nexport const updateDetailShape = (payload) => {\n    return (dispatch) => {\n        console.log(payload)\n        dispatch({\n            type: 'UPDATE_DETAIL_SHAPE',\n            payload\n        })\n    }\n}\n\nexport const deleteItem = (payload) => {\n    return(dispacth) => {\n        console.log(payload)\n        if(payload.item === 'button'){\n            dispacth({\n                type: 'DELETE_BUTTON',\n                payload: payload.selectedButton\n            })\n        }else{\n            dispacth({\n                type: 'DELETE_SHAPE',\n                payload: payload.selectedShape\n            })\n        }\n    }\n}\n\n","import React from 'react'\nimport { Stage, Layer, Rect, Circle, Transformer, Text } from 'react-konva';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { selected, selectedShape, updateButton, updateShape } from '../../store/app/action';\n\nconst width = window.innerWidth / 2\nconst height = window.innerHeight / 2\n\n\nconst Rectangle = ({ shapeProps, isSelected, onSelect, onChange }) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n\n  React.useEffect(() => {\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected]);\n\n  return (\n    <React.Fragment>\n      <Rect\n        onClick={onSelect}\n        onTap={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        radius={'10px'}\n        draggable\n        onDragEnd={(e) => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y(),\n          });\n        }}\n        onTransformEnd={(e) => {\n          // transformer is changing scale of the node\n          // and NOT its width or height\n          // but in the store we have only width and height\n          // to match the data better we will reset scale on transform end\n          const node = shapeRef.current;\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n\n          // we will reset it back\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            // set minimal value\n            width: Math.max(5, node.width() * scaleX),\n            height: Math.max(node.height() * scaleY),\n          });\n        }}\n      >\n      </Rect>\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            // limit resize\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\n\nconst Shape = ({ shapeProps, isSelected, onSelect, onChange }) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n\n  React.useEffect(() => {\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected]);\n\n  return (\n    <React.Fragment>\n      <Rect\n        onClick={onSelect}\n        onTap={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        draggable\n        onDragEnd={(e) => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y(),\n          });\n        }}\n        onTransformEnd={(e) => {\n          // transformer is changing scale of the node\n          // and NOT its width or height\n          // but in the store we have only width and height\n          // to match the data better we will reset scale on transform end\n          const node = shapeRef.current;\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n\n          // we will reset it back\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            // set minimal value\n            width: Math.max(5, node.width() * scaleX),\n            height: Math.max(node.height() * scaleY),\n          });\n        }}\n      />\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            // limit resize\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default function Index(props) {\n\n  const dispatch = useDispatch()\n\n  const buttons = useSelector(state => state.Main.buttons)\n  const shapes = useSelector(state => state.Main.shapes)\n  const image = useSelector(state => state.Main.image)\n\n  React.useEffect(() => {\n    // console.log(buttons.length)\n  }, [buttons, shapes])\n\n  const [rectangles, setRectangles] = React.useState(buttons);\n  const [selectedId, selectShape] = React.useState(null);\n  const [selectedIdShape, selectShapeS] = React.useState(null);\n\n  const checkDeselect = (e) => {\n    // deselect when clicked on empty area\n    const clickedOnEmpty = e.target === e.target.getStage();\n    if (clickedOnEmpty) {\n      selectShape(null);\n      selectShapeS(null)\n      hideSidebar()\n    }\n  };\n\n  const showSidebar = () => {\n    document.querySelector('.sidebar-right').style.right = 0\n  }\n\n  const hideSidebar = () => {\n    document.querySelector('.sidebar-right').style.right = '-400px'\n  }\n\n  return (\n    <Stage\n      width={width}\n      height={height}\n      onMouseDown={checkDeselect}\n      onTouchStart={checkDeselect}\n\n      // style={{ \n      //     backgroundImage:`url(${image})`,\n      //     backgroundRepeat: 'no-repeat',\n      //     backgroundSize: 'cover'\n      // }}\n      style={image !== '' ? {\n        backgroundImage: `url(${image})`,\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover'\n      } : { backgroundColor: 'white' }}\n    >\n      <Layer>\n        {buttons.map((rect, i) => {\n          return (\n            <Rectangle\n              key={i}\n              shapeProps={rect}\n              onClick={() => alert(rect.label)}\n              isSelected={rect.id === selectedId}\n              onSelect={() => {\n                selectShape(rect.id);\n                selectShapeS(null)\n                console.log(i)\n                dispatch(selected(i))\n                showSidebar()\n              }}\n              onChange={(newAttrs) => {\n                const rects = buttons.slice();\n                //   rects[i] = newAttrs;\n                //   setRectangles(rects);\n\n                dispatch(updateButton(rects[i], newAttrs))\n              }}\n            />\n          );\n        })}\n\n        {shapes.map((rect, i) => {\n          return (\n            <Shape\n              key={i}\n              shapeProps={rect}\n              isSelected={rect.id === selectedIdShape}\n              onSelect={() => {\n                selectShapeS(rect.id);\n                selectShape(null);\n                dispatch(selectedShape(i))\n                showSidebar()\n              }}\n              onChange={(newAttrs) => {\n                const rects = shapes.slice();\n                //   rects[i] = newAttrs;\n                //   setRectangles(rects);\n                console.log(rects)\n                dispatch(updateShape(rects[i], newAttrs))\n              }}\n            />\n          );\n        })}\n      </Layer>\n    </Stage>\n  );\n}\n\n\n\n\n","import React from 'react';\nimport './sidebar.css';\nimport { useSelector } from 'react-redux';\n\nexport default function Index() {\n\n    const buttons = useSelector(state => state.Main.buttons)\n    const shapes = useSelector(state => state.Main.shapes)\n    const image = useSelector(state => state.Main.image)\n\n    const cekButtons = () => {\n        console.log(buttons)\n    }\n\n    return (\n        <div className=\"sidebar\">\n             <pre style={{ color: '#fff' }}>\n              image: {image}\n            </pre>\n            <pre style={{ color: '#fff' }}>\n              buttons: {JSON.stringify(buttons, null, 2)}\n            </pre>\n            {/* <pre style={{ color: '#fff' }}>\n              shapes: {JSON.stringify(shapes, null, 2)}\n            </pre> */}\n        </div>\n    )\n}\n","import React from 'react';\nimport './index.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { PhotoshopPicker, TwitterPicker, SketchPicker, CirclePicker } from 'react-color';\nimport { updateDetail, updateBorderRadius } from '../../../store/app/action';\nimport { parse } from 'uuid';\nimport {\n    Route,\n    NavLink,\n    HashRouter\n} from \"react-router-dom\";\n\n\nexport default function Index() {\n\n    const dispatch = useDispatch()\n    const selected = useSelector(state => state.Main.selected)\n    const buttons = useSelector(state => state.Main.buttons)\n    const [displayColor, setDisplayColor] = React.useState(false)\n\n    React.useEffect(() => {\n        console.log(selected)\n    }, [buttons])\n\n    const showDisplay = () => {\n        setDisplayColor(!displayColor)\n    }\n\n    const changeDetail = (index, key, value, id) => {\n        const payload = {\n            index,\n            key,\n            value,\n            id\n        }\n        dispatch(updateDetail(payload))\n    }\n\n    const chnageBorderRadius = (index, key, value, id, indexborder) => {\n        const payload = {\n            index,\n            key,\n            value,\n            id,\n            indexborder,\n            datas : buttons[selected].cornerRadius\n        }\n        dispatch(updateBorderRadius(payload))\n    }\n\n    const popover = {\n        position: 'absolute',\n        zIndex: '2',\n    }\n    const cover = {\n        position: 'fixed',\n        top: '0px',\n        right: '0px',\n        bottom: '0px',\n        left: '0px',\n    }\n\n    const handleChangeComplete = (color, event) => {\n        changeDetail(selected, 'fill', color.hex, buttons[selected].id)\n    };\n\n    const borderColor = (color, event) => {\n        changeDetail(selected, 'stroke', color.hex, buttons[selected].id)\n    };\n\n    const shadowColor = (color, event) => {\n        changeDetail(selected, 'shadowColor', color.hex, buttons[selected].id)\n    };\n\n    return (\n        <div className=\"sidebar-right\">\n            {buttons.length !== 0 ? selected !== '' ?\n                <div className=\"sidebar-right-container\">\n                    <div className=\"position\">\n                        <h5>Positions</h5>\n                        <div className=\"form-container\">\n                            <div className=\"form\">\n                                <label>x position</label>\n                                <input\n                                    type=\"number\"\n                                    name=\"x\"\n                                    value={buttons[selected].x}\n                                    onChange={(e) => changeDetail(selected, 'x', parseInt(e.target.value), buttons[selected].id)}\n                                />\n                            </div>\n                            <div className=\"form\">\n                                <label>y position</label>\n                                <input\n                                    type=\"number\"\n                                    name=\"y\"\n                                    value={buttons[selected].y}\n                                    onChange={e => changeDetail(selected, 'y', parseInt(e.target.value), buttons[selected].id)}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"form-container\">\n                            <div className=\"form\">\n                                <label>Height</label>\n                                <input\n                                    type=\"number\"\n                                    name=\"height\"\n                                    value={buttons[selected].height}\n                                    onChange={e => changeDetail(selected, 'height', parseInt(e.target.value), buttons[selected].id)}\n                                />\n                            </div>\n                            <div className=\"form\">\n                                <label>Width</label>\n                                <input\n                                    type=\"number\"\n                                    name=\"width\"\n                                    value={buttons[selected].width}\n                                    onChange={e => changeDetail(selected, 'width', parseInt(e.target.value), buttons[selected].id)}\n                                />\n                            </div>\n                        </div>\n                    </div>\n\n\n                    <div className=\"position\">\n                        <h5>Fill & Opacity</h5>\n                        <input\n                            id=\"1\"\n                            type=\"range\"\n                            name=\"transparant\"\n                            min={1}\n                            max={10}\n                            onChange={e => changeDetail(selected, 'opacity', parseFloat(e.target.value / 10), buttons[selected].id)}\n                            defaultValue={buttons[selected].opacity}  \n                            style={{ width: '100%', marginBottom: 20 }} />\n                        <TwitterPicker onChange={handleChangeComplete} color={buttons[selected].fill} />\n                    </div>\n                    \n                    <div className=\"position\">\n                        <h5>Border</h5>\n                        <div className=\"form-container\">\n                            <div className=\"form\">\n                                <label>Top left</label>\n                                <input\n                                    type=\"number\"\n                                    name=\"topleft\"\n                                    value={buttons[selected].cornerRadius[0]}\n                                    defaultValue={0}\n                                    onChange={(e) => chnageBorderRadius(selected, 'cornerRadius', parseInt(e.target.value), buttons[selected].id, 0)}\n                                />\n                            </div>\n                            <div className=\"form\">\n                                <label>Top Right</label>\n                                <input\n                                    type=\"number\"\n                                    value={buttons[selected].cornerRadius[1]}\n                                    defaultValue={0}\n                                    onChange={e => chnageBorderRadius(selected, 'cornerRadius', parseInt(e.target.value), buttons[selected].id, 1)}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"form-container\">\n                            <div className=\"form\">\n                                <label>Bottom Right</label>\n                                <input\n                                    type=\"number\"\n                                    name=\"x\"\n                                    defaultValue={0}\n                                    value={buttons[selected].cornerRadius[2]}\n                                    onChange={(e) => chnageBorderRadius(selected, 'cornerRadius', parseInt(e.target.value), buttons[selected].id, 2)}\n                                />\n                            </div>\n                            <div className=\"form\">\n                                <label>Bottom Left</label>\n                                <input\n                                    type=\"number\"\n                                    value={buttons[selected].cornerRadius[3]}\n                                    defaultValue={0}\n                                    onChange={e => chnageBorderRadius(selected, 'cornerRadius', parseInt(e.target.value), buttons[selected].id, 3)}\n                                />\n                            </div>\n                        </div>\n\n                        <label style={{ marginTop: 20 }}>Border width</label>\n                        <input\n                            id=\"1\"\n                            type=\"range\"\n                            name=\"transparant\"\n                            step={1}\n                            min={0}\n                            max={20}\n                            onChange={(e) => changeDetail(selected, 'strokeWidth', parseInt(e.target.value), buttons[selected].id)}\n                            defaultValue={buttons[selected].stokeWidth}  \n                            style={{ width: '100%', marginBottom: 20,  }} />\n                           \n                        <TwitterPicker onChange={borderColor} color={buttons[selected].stroke} />\n                    </div>\n\n                    <div className=\"position\">\n                        <h5>Shadow</h5>\n                        <label>Shadow opacity</label>\n                        <input\n                            id=\"1\"\n                            type=\"range\"\n                            name=\"transparant\"\n                            min={1}\n                            max={10}\n                            onChange={e => changeDetail(selected, 'shadowOpacity', parseFloat(e.target.value / 10), buttons[selected].id)}\n                            defaultValue={buttons[selected].shadowOpacity}  \n                            style={{ width: '100%', marginBottom: 20 }} />\n\n                        <label>Shadow blur</label>\n                        <input\n                            id=\"1\"\n                            type=\"range\"\n                            name=\"transparant\"\n                            min={1}\n                            max={50}\n                            onChange={e => changeDetail(selected, 'shadowBlur', parseFloat(e.target.value), buttons[selected].id)}\n                            defaultValue={buttons[selected].shadowBlur}  \n                            style={{ width: '100%', marginBottom: 20 }} />\n\n                            <TwitterPicker onChange={shadowColor} color={buttons[selected].fill} />\n                    </div>\n                </div>\n                : <></> : <></>\n\n            }\n\n        </div>\n    )\n}\n","import React from 'react';\nimport './../../App.css';\nimport Draw from './../Draw/index';\nimport SidebarLeft from './SideBarLeft';\nimport SidebarRight from './SideBarRight';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addButton, addShape, setImage, deleteItem } from '../../store/app/action';\nimport { useHistory } from \"react-router-dom\";\n\nfunction App() {\n  let history = useHistory();\n  const dispatch = useDispatch()\n  const [urlImage, setUrlImage] = React.useState('')\n\n  const buttons = useSelector(state => state.Main.buttons)\n  const selectedButton = useSelector(state => state.Main.selected)\n  const selectedShape = useSelector(state => state.Main.selected_shape)\n  const item = useSelector(state => state.Main.item)\n\n  React.useEffect(() => {\n    console.log(selectedShape)\n    console.log(selectedButton)\n    console.log(item)\n    console.log(buttons)\n  }, [selectedShape, selectedButton, item, buttons])\n\n  const _addImage = () => {\n    dispatch(setImage(urlImage))\n    setUrlImage('')\n  }\n\n  const _addButtons = () => {\n    dispatch(addButton())\n  }\n\n  const _addShapes = () => {\n    dispatch(addShape())\n  }\n\n  const _moveUp = () => {\n    // buttons[selectedButton].moveUp()\n  }\n\n  const _moveDown = () => {\n    // buttons[selectedButton].moveUp()\n  }\n\n  const _deleteItem = () => {\n    const payload = {\n      item,\n      selectedButton,\n      selectedShape\n    }\n\n    dispatch(deleteItem(payload))\n  }\n\n  const _toPreview = () => {\n    history.push(\"/preview\")\n    // const win = window.open(\"/preview\", \"_blank\");\n    // win.focus();\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar-container\">\n        <SidebarLeft />\n      </div>\n      <div className=\"main\">\n      <div style={{\n            display: 'flex',\n            width: '100%',\n            marginTop: 20,\n            justifyContent: 'flex-end'\n          }}>\n        <div\n          className=\"button\"\n          style={{ width: '15%', margin: 3, backgroundColor: '#0984e3' }}\n          onClick={_toPreview}\n        >\n          Preview\n        </div>\n        </div>\n        <Draw />\n        <div>\n          <div style={{\n            display: 'flex',\n            width: '100%',\n            marginTop: 20,\n            justifyContent: 'flex-end'\n          }}>\n            {item === '' ? <></> :\n              <>\n                <div\n                  className=\"button\"\n                  style={{ width: '15%', margin: 3, backgroundColor: '#0984e3' }}\n                  onClick={_moveUp}\n                >\n                  Move Up\n                </div>\n                <div\n                  className=\"button\"\n                  style={{ width: '15%', margin: 3, backgroundColor: '#0984e3' }}\n                  onClick={_moveDown}\n                >\n                  Move Down\n                </div>\n                <div\n                  className=\"button\"\n                  style={{ width: '15%', margin: 3, backgroundColor: '#0984e3' }}\n                  onClick={_addImage}\n                >\n                  Clone\n                </div>\n                <div\n                  className=\"button\"\n                  style={{ width: '15%', margin: 3, backgroundColor: '#d63031' }}\n                  onClick={_deleteItem}\n                >\n                  Delete\n                </div>\n              </>\n            }\n          </div>\n          <div style={{\n            display: 'flex',\n            width: '100%',\n            marginTop: 20,\n\n          }}>\n            <input\n              style={{ padding: 5, width: '80%', borderRadius: 5, borderWidth: 0 }}\n              placeholder=\"Paste image link here\"\n              value={urlImage}\n              onChange={e => setUrlImage(e.target.value)}\n            />\n            <div\n              className=\"button\"\n              style={{ width: '15%', margin: 3 }}\n              onClick={_addImage}\n            >\n              Save\n            </div>\n          </div>\n          <div className=\"button\" onClick={_addButtons}>\n            Add button\n          </div>\n          {/* <div className=\"button\" onClick={_addShapes}>\n            Add Shape\n          </div> */}\n          <div className=\"button\">\n            Add Text\n          </div>\n          <div className=\"button\">\n            Add Image / Logo\n          </div>\n        </div>\n      </div>\n      <div className=\"sidebar-container\">\n        <SidebarRight />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n","import React from 'react'\nimport { Stage, Layer, Rect, Circle, Transformer, Text } from 'react-konva';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { selected, selectedShape, updateButton, updateShape } from './../../../store/app/action';\n\nconst width = window.innerWidth / 2\nconst height = window.innerHeight / 2\n\nconst Rectangle = ({ shapeProps, isSelected, onSelect, onChange }) => {\n    const shapeRef = React.useRef();\n    const trRef = React.useRef();\n\n    React.useEffect(() => {\n        if (isSelected) {\n            // we need to attach transformer manually\n            trRef.current.nodes([shapeRef.current]);\n            trRef.current.getLayer().batchDraw();\n        }\n    }, [isSelected]);\n\n    return (\n        <React.Fragment>\n            <Rect\n                onClick={onSelect}\n                onTap={onSelect}\n                ref={shapeRef}\n                {...shapeProps}\n                radius={'10px'}\n                onDragEnd={(e) => {\n                    onChange({\n                        ...shapeProps,\n                        x: e.target.x(),\n                        y: e.target.y(),\n                    });\n                }}\n                onTransformEnd={(e) => {\n                    // transformer is changing scale of the node\n                    // and NOT its width or height\n                    // but in the store we have only width and height\n                    // to match the data better we will reset scale on transform end\n                    const node = shapeRef.current;\n                    const scaleX = node.scaleX();\n                    const scaleY = node.scaleY();\n\n                    // we will reset it back\n                    node.scaleX(1);\n                    node.scaleY(1);\n                    onChange({\n                        ...shapeProps,\n                        x: node.x(),\n                        y: node.y(),\n                        // set minimal value\n                        width: Math.max(5, node.width() * scaleX),\n                        height: Math.max(node.height() * scaleY),\n                    });\n                }}\n            >\n            </Rect>\n            {isSelected && (\n                <Transformer\n                    ref={trRef}\n                    boundBoxFunc={(oldBox, newBox) => {\n                        // limit resize\n                        if (newBox.width < 5 || newBox.height < 5) {\n                            return oldBox;\n                        }\n                        return newBox;\n                    }}\n                />\n            )}\n        </React.Fragment>\n    );\n};\n\n\nconst Shape = ({ shapeProps, isSelected, onSelect, onChange }) => {\n    const shapeRef = React.useRef();\n    const trRef = React.useRef();\n\n    React.useEffect(() => {\n        if (isSelected) {\n            // we need to attach transformer manually\n            trRef.current.nodes([shapeRef.current]);\n            trRef.current.getLayer().batchDraw();\n        }\n    }, [isSelected]);\n\n    return (\n        <React.Fragment>\n            <Rect\n                onClick={onSelect}\n                onTap={onSelect}\n                ref={shapeRef}\n                {...shapeProps}\n\n                onDragEnd={(e) => {\n                    onChange({\n                        ...shapeProps,\n                        x: e.target.x(),\n                        y: e.target.y(),\n                    });\n                }}\n                onTransformEnd={(e) => {\n                    // transformer is changing scale of the node\n                    // and NOT its width or height\n                    // but in the store we have only width and height\n                    // to match the data better we will reset scale on transform end\n                    const node = shapeRef.current;\n                    const scaleX = node.scaleX();\n                    const scaleY = node.scaleY();\n\n                    // we will reset it back\n                    node.scaleX(1);\n                    node.scaleY(1);\n                    onChange({\n                        ...shapeProps,\n                        x: node.x(),\n                        y: node.y(),\n                        // set minimal value\n                        width: Math.max(5, node.width() * scaleX),\n                        height: Math.max(node.height() * scaleY),\n                    });\n                }}\n            />\n            {isSelected && (\n                <Transformer\n                    ref={trRef}\n                    boundBoxFunc={(oldBox, newBox) => {\n                        // limit resize\n                        if (newBox.width < 5 || newBox.height < 5) {\n                            return oldBox;\n                        }\n                        return newBox;\n                    }}\n                />\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default function Index(props) {\n\n    const dispatch = useDispatch()\n\n    const buttons = useSelector(state => state.Main.buttons)\n    const shapes = useSelector(state => state.Main.shapes)\n    const image = useSelector(state => state.Main.image)\n\n    React.useEffect(() => {\n        // console.log(buttons.length)\n    }, [buttons, shapes])\n\n    const [rectangles, setRectangles] = React.useState(buttons);\n    const [selectedId, selectShape] = React.useState(null);\n    const [selectedIdShape, selectShapeS] = React.useState(null);\n\n    const checkDeselect = (e) => {\n        // deselect when clicked on empty area\n        const clickedOnEmpty = e.target === e.target.getStage();\n        if (clickedOnEmpty) {\n            selectShape(null);\n            selectShapeS(null)\n        }\n    };\n\n    // const showSidebar = () => {\n    //     document.querySelector('.sidebar-right').style.right = 0\n    // }\n\n    // const hideSidebar = () => {\n    //     document.querySelector('.sidebar-right').style.right = '-400px'\n    // }\n\n    return (\n        <div\n            style={{  \n                display: 'flex',\n                justifyContent:'center',\n                alignContent: 'center',\n                backgroundColor: '#ddd',\n                height: '100vh'\n            }}\n        >\n            <Stage\n                width={width}\n                height={height}\n                onMouseDown={checkDeselect}\n                onTouchStart={checkDeselect}\n                // style={{ \n                //     backgroundImage:`url(${image})`,\n                //     backgroundRepeat: 'no-repeat',\n                //     backgroundSize: 'cover'\n                // }}\n                style={image !== '' ? {\n                    backgroundImage: `url(${image})`,\n                    backgroundRepeat: 'no-repeat',\n                    backgroundSize: 'cover'\n                } : { backgroundColor: 'white', height:height }}\n            >\n                <Layer>\n                    {buttons.map((rect, i) => {\n                        return (\n                            <Rectangle\n                                key={i}\n                                shapeProps={rect}\n                                onClick={() => alert(rect.label)}\n                                isSelected={rect.id === selectedId}\n                                onSelect={() => {\n                                    selectShape(rect.id);\n                                    selectShapeS(null)\n                                    console.log(i)\n                                    dispatch(selected(i))\n                                }}\n                                onChange={(newAttrs) => {\n                                    const rects = buttons.slice();\n                                    //   rects[i] = newAttrs;\n                                    //   setRectangles(rects);\n\n                                    dispatch(updateButton(rects[i], newAttrs))\n                                }}\n                            />\n                        );\n                    })}\n\n                    {shapes.map((rect, i) => {\n                        return (\n                            <Shape\n                                key={i}\n                                shapeProps={rect}\n                                isSelected={rect.id === selectedIdShape}\n                                onSelect={() => {\n                                    selectShapeS(rect.id);\n                                    selectShape(null);\n                                    dispatch(selectedShape(i))\n                                }}\n                                onChange={(newAttrs) => {\n                                    const rects = shapes.slice();\n                                    //   rects[i] = newAttrs;\n                                    //   setRectangles(rects);\n                                    console.log(rects)\n                                    dispatch(updateShape(rects[i], newAttrs))\n                                }}\n                            />\n                        );\n                    })}\n                </Layer>\n            </Stage>\n        </div>\n    );\n}\n\n\n\n\n","import React from 'react'\nimport {\n    Route,\n    NavLink,\n    HashRouter\n} from \"react-router-dom\";\n\nimport Index from './Screen';\nimport Preview from './Screen/Preview'\n\n\nexport default function Routes() {\n    return (\n        <HashRouter>\n            <div>\n            <Route exact path=\"/\" component={Index} />\n            <Route path=\"/preview\" component={Preview} />\n            </div>\n        </HashRouter>\n    )\n}\n","import logo from './logo.svg';\nimport './App.css';\nimport { Provider } from 'react-redux';\n\nimport Store from './store/store';\nimport RootApp from './components/Route';\n\nfunction App() {\n    return (\n        <Provider store={Store}>\n            <RootApp />\n        </Provider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}